using DofGMTool.Models;
using FreeSql;
using MySqlConnector;
using System.Diagnostics;

namespace DofGMTool.Helpers;

public static class DatabaseHelper
{
    // 用于缓存不同数据库的 IFreeSql<MySqlFlag> 实例
    private static readonly Dictionary<string, IFreeSql<MySqlFlag>> _fsqlCache = new();

    // 添加一个静态计数器来记录实例创建次数
    private static int _fsqlInstanceCount = 0;

    // 获取数据库连接
    public static IFreeSql<MySqlFlag>? GetMySqlConnection(string databaseName)
    {
        // 获取调用堆栈信息
        //var stackTrace = new StackTrace();
        //var callingFrame = stackTrace.GetFrame(1);
        //var method = callingFrame?.GetMethod();
        //var callerName = method?.Name;
        //var callerType = method?.DeclaringType?.FullName;

        //Debug.WriteLine($"GetMySqlConnection 被调用者：{callerType}.{callerName}");

        ConnectionInfo? connectionInfo = GlobalVariables.Instance.ConnectionInfo;
        if (connectionInfo == null)
        {
            Debug.WriteLine("全局变量未初始化，请检查。");
            return null;
        }

        // 检查必填字段是否为空
        if (string.IsNullOrWhiteSpace(connectionInfo.Ip) ||
            string.IsNullOrWhiteSpace(connectionInfo.Port) ||
            string.IsNullOrWhiteSpace(connectionInfo.User) ||
            string.IsNullOrWhiteSpace(connectionInfo.Password))
        {
            Debug.WriteLine("连接信息不完整，请检查IP、端口、用户名和密码是否已填写。");
            return null;
        }

        // 构建缓存键，由连接信息和数据库名组成
        string cacheKey = $"{connectionInfo.Ip}:{connectionInfo.Port}:{connectionInfo.User}:{databaseName}";

        // 如果缓存中已有对应的 IFreeSql<MySqlFlag> 实例，直接返回
        if (_fsqlCache.TryGetValue(cacheKey, out IFreeSql<MySqlFlag>? fsql))
        {
            Debug.WriteLine($"使用缓存的 FreeSql 实例，当前实例总数：{_fsqlInstanceCount}");
            return fsql;
        }

        // 构建连接字符串
        string connectionString = $"Data Source={connectionInfo.Ip};Port={connectionInfo.Port};User ID={connectionInfo.User};Password={connectionInfo.Password};Initial Catalog={databaseName};Charset=latin1;SslMode=none;ConvertZeroDateTime=True;Pooling=true;Min Pool Size=1;Max Pool Size=100;Connection Timeout=25;";

        try
        {
            // 创建新的 IFreeSql<MySqlFlag> 实例
            fsql = new FreeSqlBuilder()
                .UseConnectionFactory(DataType.MySql, () =>
                {
                    var conn = new MySqlConnection(connectionString);
                    conn.Open();
                    using (MySqlCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "SET Charset latin1;";
                        cmd.ExecuteNonQuery();
                    }
                    return conn;
                })
                .UseAutoSyncStructure(false)
                .UseAdoConnectionPool(true)
                .UseMonitorCommand(cmd => Debug.WriteLine($"Sql：{cmd.CommandText}"))
                .Build<MySqlFlag>(); // 指定泛型参数

            // 递增实例计数器，并输出调试信息
            _fsqlInstanceCount++;
            Debug.WriteLine($"创建了新的 FreeSql 实例，当前实例总数：{_fsqlInstanceCount}");

            // 测试数据库连接
            //fsql.Ado.ExecuteConnectTest();

            // 缓存实例
            _fsqlCache[cacheKey] = fsql;

            return fsql;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"无法连接到数据库 '{databaseName}'：{ex.Message}");
            throw new Exception($"无法连接到数据库 '{databaseName}'：{ex.Message}, 请检查连接信息");
        }
    }
}
